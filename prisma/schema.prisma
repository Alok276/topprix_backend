// prisma/schema.prisma (corrected)

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  RETAILER
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  TRIALING
  UNPAID
  INCOMPLETE
  INCOMPLETE_EXPIRED
}

enum PaymentType {
  SUBSCRIPTION
  FLYER_UPLOAD
  COUPON_PURCHASE
}

model User {
  id                    String              @id @default(uuid())
  email                 String              @unique
  phone                 String?
  name                  String?
  role                  UserRole            @default(USER)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  location              String?
  stripeCustomerId      String?             @unique
  hasActiveSubscription Boolean             @default(false) // Only relevant for RETAILER role
  subscriptionId        String?
  subscriptionStatus    SubscriptionStatus?
  pricingPlanId         String?
  currentPeriodEnd      DateTime?
  preferredStores       Store[]             @relation("UserFavoriteStores")
  preferredCategories   Category[]          @relation("UserPreferredCategories")
  savedFlyers           Flyer[]             @relation("UserSavedFlyers")
  savedCoupons          Coupon[]            @relation("UserSavedCoupons")
  shoppingLists         ShoppingList[]
  wishlist              WishlistItem[]
  payments              Payment[]
  subscriptions         Subscription[]
  purchasedCoupons      PurchasedCoupon[]
}

model PricingPlan {
  id            String         @id @default(uuid())
  name          String
  description   String
  stripePriceId String
  amount        Float
  currency      String         @default("usd")
  interval      String         @default("month") // month, year, etc.
  isActive      Boolean        @default(true)
  features      String[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id                   String             @id @default(uuid())
  userId               String
  user                 User               @relation(fields: [userId], references: [id])
  pricingPlanId        String
  pricingPlan          PricingPlan        @relation(fields: [pricingPlanId], references: [id])
  stripeSubscriptionId String
  status               SubscriptionStatus
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  payments             Payment[]
}

model Payment {
  id              String        @id @default(uuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  amount          Float
  currency        String        @default("usd")
  stripePaymentId String
  paymentType     PaymentType
  status          String
  metadata        Json?
  subscriptionId  String?
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id])
  flyerId         String?
  flyer           Flyer?        @relation(fields: [flyerId], references: [id])
  couponId        String? // Added reference to coupon
  coupon          Coupon?       @relation("PaymentCoupon", fields: [couponId], references: [id])
  createdAt       DateTime      @default(now())
}

model PurchasedCoupon {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  couponId        String
  coupon          Coupon   @relation(fields: [couponId], references: [id])
  amount          Float
  currency        String   @default("usd")
  stripePaymentId String
  purchasedAt     DateTime @default(now())
}

model Store {
  id          String     @id @default(uuid())
  name        String
  logo        String?
  description String?
  address     String?
  latitude    Float?
  longitude   Float?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  flyers      Flyer[]
  coupons     Coupon[]
  favoredBy   User[]     @relation("UserFavoriteStores")
  categories  Category[] @relation("StoreCategories")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  flyers      Flyer[]  @relation("FlyerCategories")
  coupons     Coupon[] @relation("CouponCategories")
  stores      Store[]  @relation("StoreCategories")
  preferredBy User[]   @relation("UserPreferredCategories")
}

model Flyer {
  id          String      @id @default(uuid())
  title       String
  storeId     String
  store       Store       @relation(fields: [storeId], references: [id])
  imageUrl    String
  startDate   DateTime
  endDate     DateTime
  isSponsored Boolean     @default(false)
  isPremium   Boolean     @default(false)
  price       Float? // Price for individual flyer upload (if not subscription)
  isPaid      Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  categories  Category[]  @relation("FlyerCategories")
  savedBy     User[]      @relation("UserSavedFlyers")
  items       FlyerItem[]
  payments    Payment[]
}

model FlyerItem {
  id                String             @id @default(uuid())
  flyerId           String
  flyer             Flyer              @relation(fields: [flyerId], references: [id])
  name              String
  price             Float
  oldPrice          Float?
  imageUrl          String?
  description       String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  shoppingListItems ShoppingListItem[]
  wishlistItems     WishlistItem[]
}

model Coupon {
  id          String            @id @default(uuid())
  title       String
  storeId     String
  store       Store             @relation(fields: [storeId], references: [id])
  code        String?
  barcodeUrl  String?
  qrCodeUrl   String?
  discount    String
  description String?
  startDate   DateTime
  endDate     DateTime
  isOnline    Boolean           @default(true)
  isInStore   Boolean           @default(true)
  isPremium   Boolean           @default(false)
  price       Float? // Price to purchase this coupon (if it's premium)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  categories  Category[]        @relation("CouponCategories")
  savedBy     User[]            @relation("UserSavedCoupons")
  purchasedBy PurchasedCoupon[]
  payments    Payment[]         @relation("PaymentCoupon")
}

model ShoppingList {
  id        String             @id @default(uuid())
  title     String
  userId    String
  user      User               @relation(fields: [userId], references: [id])
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  items     ShoppingListItem[]
}

model ShoppingListItem {
  id             String       @id @default(uuid())
  shoppingListId String
  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id])
  flyerItemId    String?
  flyerItem      FlyerItem?   @relation(fields: [flyerItemId], references: [id])
  name           String
  quantity       Int          @default(1)
  isChecked      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model WishlistItem {
  id          String     @id @default(uuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  flyerItemId String?
  flyerItem   FlyerItem? @relation(fields: [flyerItemId], references: [id])
  name        String
  targetPrice Float?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}
