// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  RETAILER
}

model User {
  id                  String         @id @default(uuid())
  email               String         @unique
  phone               String?
  name                String?
  role                UserRole       @default(USER)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  location            String?
  preferredStores     Store[]        @relation("UserFavoriteStores")
  preferredCategories Category[]     @relation("UserPreferredCategories")
  savedFlyers         Flyer[]        @relation("UserSavedFlyers")
  savedCoupons        Coupon[]       @relation("UserSavedCoupons")
  shoppingLists       ShoppingList[]
  wishlist            WishlistItem[]
}

model Store {
  id          String     @id @default(uuid())
  name        String
  logo        String?
  description String?
  address     String?
  latitude    Float?
  longitude   Float?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  flyers      Flyer[]
  coupons     Coupon[]
  favoredBy   User[]     @relation("UserFavoriteStores")
  categories  Category[] @relation("StoreCategories")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  flyers      Flyer[]  @relation("FlyerCategories")
  coupons     Coupon[] @relation("CouponCategories")
  stores      Store[]  @relation("StoreCategories")
  preferredBy User[]   @relation("UserPreferredCategories")
}

model Flyer {
  id          String      @id @default(uuid())
  title       String
  storeId     String
  store       Store       @relation(fields: [storeId], references: [id])
  imageUrl    String
  startDate   DateTime
  endDate     DateTime
  isSponsored Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  categories  Category[]  @relation("FlyerCategories")
  savedBy     User[]      @relation("UserSavedFlyers")
  items       FlyerItem[]
}

model FlyerItem {
  id                String             @id @default(uuid())
  flyerId           String
  flyer             Flyer              @relation(fields: [flyerId], references: [id])
  name              String
  price             Float
  oldPrice          Float?
  imageUrl          String?
  description       String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  shoppingListItems ShoppingListItem[]
  wishlistItems     WishlistItem[]
}

model Coupon {
  id          String     @id @default(uuid())
  title       String
  storeId     String
  store       Store      @relation(fields: [storeId], references: [id])
  code        String?
  barcodeUrl  String?
  qrCodeUrl   String?
  discount    String
  description String?
  startDate   DateTime
  endDate     DateTime
  isOnline    Boolean    @default(true)
  isInStore   Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  categories  Category[] @relation("CouponCategories")
  savedBy     User[]     @relation("UserSavedCoupons")
}

model ShoppingList {
  id        String             @id @default(uuid())
  title     String
  userId    String
  user      User               @relation(fields: [userId], references: [id])
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  items     ShoppingListItem[]
}

model ShoppingListItem {
  id             String       @id @default(uuid())
  shoppingListId String
  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id])
  flyerItemId    String?
  flyerItem      FlyerItem?   @relation(fields: [flyerItemId], references: [id])
  name           String
  quantity       Int          @default(1)
  isChecked      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model WishlistItem {
  id          String     @id @default(uuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  flyerItemId String?
  flyerItem   FlyerItem? @relation(fields: [flyerItemId], references: [id])
  name        String
  targetPrice Float?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}
